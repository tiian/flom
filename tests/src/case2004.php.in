<?php
/*
 * Copyright (c) 2013-2024, Christian Ferrari <tiian@users.sourceforge.net>
 * All rights reserved.
 *
 * This file is part of FLoM.
 *
 * FLoM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * FLoM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FLoM.  If not, see <http://www.gnu.org/licenses/>.
 */

/* include FLoM header only if SWIG < 4.1.0 */
@PHP_HEADER_TEST@



$ret_cod = FLOM_RC_OK;
$handle1 = new flom_handle_t(); /* used for non transactional resource */
$handle2 = new flom_handle_t(); /* used for transactional resource */

/* First step: non transactional resource */
/* create a new handle */
if (FLOM_RC_OK != ($ret_cod = flom_handle_init($handle1))) {
	fwrite(STDERR, "flom_handle_init() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* setting the resource name: non transactional sequence */
if (FLOM_RC_OK != ($ret_cod = flom_handle_set_resource_name(
		$handle1, "_s_nontransactional[1]"))) {
	fwrite(STDERR, "flom_handle_set_resource_name() returned " .
		$ret_cod . ", '" . flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* set a new value for resource idle lifespan */
flom_handle_set_resource_idle_lifespan($handle1, 60000);
/* lock acquisition */
if (FLOM_RC_OK != ($ret_cod = flom_handle_lock($handle1))) {
	fwrite(STDERR, "flom_handle_lock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
} else {
	/* retrieve locked element */
	fwrite(STDOUT, "locked element is " .
		flom_handle_get_locked_element($handle1) . "\n");
}
/* lock release & rollback: the resource is not transactional, the
 * function must return a warning condition */
if (FLOM_RC_RESOURCE_IS_NOT_TRANSACTIONAL != (
		$ret_cod = flom_handle_unlock_rollback($handle1))) {
	fwrite(STDERR, "flom_handle_unlock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* lock acquisition */
if (FLOM_RC_OK != ($ret_cod = flom_handle_lock($handle1))) {
	fwrite(STDERR, "flom_handle_lock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
} else {
	/* retrieve locked element */
	fwrite(STDOUT, "locked element is " .
		flom_handle_get_locked_element($handle1) . "\n");
}
/* the resource associated to handle1 is intentionally not unlocked
 * to check the behavior in case of abort */

/* Second step: transactional resource */
/* create a new handle */
if (FLOM_RC_OK != ($ret_cod = flom_handle_init($handle2))) {
	fwrite(STDERR, "flom_handle_init() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* setting the resource name: transactional sequence */
if (FLOM_RC_OK != ($ret_cod = flom_handle_set_resource_name(
		$handle2, "_S_nontransactional[1]"))) {
	fwrite(STDERR, "flom_handle_set_resource_name() returned " .
		$ret_cod . ", '" . flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* set a new value for resource idle lifespan */
flom_handle_set_resource_idle_lifespan($handle2, 60000);
/* lock acquisition */
if (FLOM_RC_OK != ($ret_cod = flom_handle_lock($handle2))) {
	fwrite(STDERR, "flom_handle_lock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
} else {
	/* retrieve locked element */
	fwrite(STDOUT, "locked element is " .
		flom_handle_get_locked_element($handle2) . "\n");
}
/* lock release & rollback */
if (FLOM_RC_OK != ($ret_cod = flom_handle_unlock_rollback($handle2))) {
	fwrite(STDERR, "flom_handle_unlock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* lock acquisition */
if (FLOM_RC_OK != ($ret_cod = flom_handle_lock($handle2))) {
	fwrite(STDERR, "flom_handle_lock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
} else {
	/* retrieve locked element */
	fwrite(STDOUT, "locked element is " .
		flom_handle_get_locked_element($handle2) . "\n");
}
/* lock release & rollback */
if (FLOM_RC_OK != ($ret_cod = flom_handle_unlock($handle2))) {
	fwrite(STDERR, "flom_handle_unlock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}
/* lock acquisition */
if (FLOM_RC_OK != ($ret_cod = flom_handle_lock($handle2))) {
	fwrite(STDERR, "flom_handle_lock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
} else {
	/* retrieve locked element */
	fwrite(STDOUT, "locked element is " .
		flom_handle_get_locked_element($handle2) . "\n");
}
/* interrupt execution to verify transactionality (the program must be
 * restarted */
exit(0);
/* this point will be never reached! */
?>
