/*
 * Copyright (c) 2013-2024, Christian Ferrari <tiian@users.sourceforge.net>
 * All rights reserved.
 *
 * This file is part of FLoM.
 *
 * FLoM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * FLoM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FLoM.  If not, see <http://www.gnu.org/licenses/>.
 */



/*
 * This example program shows the usage of libflom API library with
 * a statically allocated handle; it uses a resource set instead of the
 * default resource and displays the name of the element obtained.
 * These are the steps:
 * 0. import org.tiian.flom package
 * 1. create an object of type FlomHandle
 * 2. set custom properties different from default values:
 *    2a. use a different AF_UNIX/PF_LOCAL socket to reach FLoM daemon
 *    2b. specifies a resource name to lock
 * 3. acquire a lock using method lock()
 * 4. execute the code protected by the acquired lock
 * 5. release the lock using method unlock()
 * 6. release the object: this step is suggested because FlomHandle objects
 *    use native C functions and this method allows the JVM to immediately
 *    release the memory allocated by the C functions
 *
 * Compilation command:
 *     javac -cp @datadir@/@PACKAGE@/java/flom.jar Advanced.java
 *
 * Note: this program needs an already started FLoM daemon, for instance:
 *     flom -s /tmp/my_socket_name -d -1 -- true
 *     java -Djava.library.path=@libdir@ -cp @datadir@/@PACKAGE@/java/flom.jar:. Advanced
 *
 * You might activate tracing if you were interested to understand what's
 * happening:
 *     export FLOM_TRACE_MASK=0x80000
 *     java -Djava.library.path=@libdir@ -cp @datadir@/@PACKAGE@/java/flom.jar:. Advanced
 */



/* step 0: import FLoM package */
import org.tiian.flom.*;



public class Advanced {
    public static void main(String[] args) {
        int retCod;
        
        try {
            /* step 1: handle creation */
            System.out.println("Creating an object of type FlomHandle...");
            FlomHandle myHandle = new FlomHandle();

            /* step 2a: set a different AF_UNIX/PF_LOCAL socket to connect to
               FLoM daemon
               checking the return code is not mandatory: this check ensures
               that the property was changed
            */
            System.out.println("Setting a different local socket name...");
            if (FlomErrorCodes.FLOM_RC_OK != (
                    retCod = myHandle.setSocketName(
                        "/tmp/my_socket_name"))) {
                System.err.println("FlomHandle.setSocketName() returned " +
                                   retCod + " ('" +
                                   FlomErrorCodes.getText(retCod) + "')");
                System.exit(1);
            }
            
            /* step 2b: set a different (non default) resource name to lock
               checking the return code is not mandatory: this check ensures
               that the property was changed
            */
            System.out.println("Setting a different resource name...");
            if (FlomErrorCodes.FLOM_RC_OK != (
                    retCod = myHandle.setResourceName("Red.Blue.Green"))) {
                System.err.println("FlomHandle.setResourceName() returned " +
                                   retCod + " ('" +
                                   FlomErrorCodes.getText(retCod) + "')");
                System.exit(1);
            }
    
            /* step 3: lock acquisition */
            System.out.println("Locking the resource...");
            myHandle.lock();
            System.out.println("FlomHandle.getLockedElement(): '" +
                               myHandle.getLockedElement() + "'");

            /* step 4: execute the code that needs lock protection */
            /*
              ...
            */
            
            /* step 5: lock release */
            System.out.println("Unlocking the resource...");
            myHandle.unlock();

            /* step 6: object release (this step is not mandatory but
               suggested */
            System.out.println("Releasing the object...");
            myHandle.free();

        } catch (FlomException e) {
            System.err.println("FlomException: FLoM ReturnCode= " +
                               e.getReturnCode() + " ('" +
                               e.getMessage() + "')");
        }
    }
}
