<?php 
/*
 * Copyright (c) 2013-2023, Christian Ferrari <tiian@users.sourceforge.net>
 * All rights reserved.
 *
 * This file is part of FLoM.
 *
 * FLoM is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as published
 * by the Free Software Foundation.
 *
 * FLoM is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with FLoM.  If not, see <http://www.gnu.org/licenses/>.
 */

/* include FLoM header */
include("@datadir@/@PACKAGE@/php/flom.php");



/*
 * This example program shows the usage of libflom API library from a
 * PHP program; it uses a resource set instead of the default resource and
 * displays the name of the obtained element.
 * These are the steps:
 * 1. create and allocate an object of type flom_handle_t
 * 2. initialize the allocated handle using function flom_handle_init()
 * 3. set custom properties different from default values:
 *    3a. use a different AF_UNIX/PF_LOCAL socket to reach FLoM daemon
 *    3b. specify a resource name to lock
 * 4. acquire a lock using function flom_handle_lock()
 * 5. execute the code protected by the acquired lock
 * 6. release the lock using function flom_handle_unlock()
 * 7. clean-up the allocated handle using function flom_handle_clean()
 * 8. deallocate the handle object
 *
 * Execution command:
 *     php -d extension=flom.so advanced.php
 * 
 *     in case flom.so module was not installed in default extension PHP
 *     directory, point it directly to FLoM installation path:
 *     php -d extension=@libdir@/flom-php-module.so basic.php
 *
 * Note: many times you have to set LD_LIBRARY_PATH to load libflom library:
 *     export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:@libdir@
 *
 * Note: this program needs an already started FLoM daemon, for instance:
 *     flom -s /tmp/my_socket_name -d -1 -- true
 *     php -d extension=flom.so advanced.php
 *
 * The program itself is not verbose, but you might activate tracing if you
 * were interested to understand what's happen:
 *     FLOM_TRACE_MASK=0x80000
 *     php -d extension=flom.so advanced.php
 */



/* step 1: handle allocation */
$handle = new flom_handle_t();
$ret_cod = FLOM_RC_OK;

/* step 2: handle initialization */
if (FLOM_RC_OK != ($ret_cod = flom_handle_init($handle))) {
	fwrite(STDERR, "flom_handle_init() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}

/* step 3a: set a different AF_UNIX/PF_LOCAL socket to connect to FLoM 
   daemon */
if (FLOM_RC_OK != ($ret_cod = flom_handle_set_socket_name(
   	       $handle, "/tmp/my_socket_name"))) {
	fwrite(STDERR, "flom_handle_set_socket_name() returned " . $ret_cod .
		" '" . flom_strerror($ret_cod) . "'\n");
	exit(1);
}

/* step 3b: set a different (non default) resource name to lock */
if (FLOM_RC_OK != ($ret_cod = flom_handle_set_resource_name(
   	       $handle, "Red.Blue.Green"))) {
	fwrite(STDERR, "flom_handle_set_resource_name() returned " . $ret_cod .
		" '" . flom_strerror($ret_cod) . "'\n");
	exit(1);
}

/* step 4: lock acquisition */
if (FLOM_RC_OK != ($ret_cod = flom_handle_lock($handle))) {
	fwrite(STDERR, "flom_handle_lock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
} else {
    fwrite(STDOUT, "flom_handle_lock(): locked element is '" . 
    		   flom_handle_get_locked_element($handle) . "'\n");
}

/* step 5: execute the code that needs lock protection */

/* step 6: lock release */
if (FLOM_RC_OK != ($ret_cod = flom_handle_unlock($handle))) {
	fwrite(STDERR, "flom_handle_unlock() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}

/* step 7: handle clean-up (memory release) */
if (FLOM_RC_OK != ($ret_cod = flom_handle_clean($handle))) {
	fwrite(STDERR, "flom_handle_clean() returned " . $ret_cod . " '" . 
		flom_strerror($ret_cod) . "'\n");
	exit(1);
}

/* step 8: handle deallocation */
$handle = NULL;

?>
